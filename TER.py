# -*- coding: utf-8 -*-
"""TER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SkCK3req8uGu6WxrtU0BU21u75YeFiA3
"""

import pandas as pd

events = pd.read_table("Log.log",sep = "|")
events.head()

events.columns

events['ServiceID'].values.tolist()

QOS = pd.read_table('QOS.txt',sep = '|')
QOS.head()
#c = la condition -> Ex : BadRC si RC < 3ms <-> < 3

#Récupérer les concepts et les conditions associées
'''c = QOS['Element1'].values.tolist()
c[0].split(':')'''
#QOS.columns.to_list()
df_colonnes = QOS.columns.to_list()
data = []
for elem in df_colonnes:
  data_elem = []
  for i in range(len(QOS[elem].values.tolist())) :
    data_elem.append(QOS[elem].values.tolist()[i].split(':'))
  data.append(data_elem)
data

#ACTUEL 01/05/2024
#Remplacer les valeurs quantitative par les valeurs qualitative
#Ca va redonner la table Log mais pour les elems on aura des val qualitativ a la place
#chercher cb de colonne Elements dans le log
nombre = len(events.columns.to_list())-3
events_list_elems = events.columns.to_list()[3:] #on recup une liste qu'avec les éléments dedans
events_copied = events.copy()
nb_elem = 0 #variable simule la colonne sur laquelle on est de g à d
affecter = False
for elem in events_list_elems : #pour chaque colonne éléments
  print("FOR 1")
  list_concepts = [] #les concepts qu'on va ajouter à chaque colonne (remplacera les val numérique)
  list_valeur_numerique = []
  list_valeur_egalite = [] #pour stocker les < <= > >= =
  for i in range(len(data[nb_elem])) :
    print("FOR 3")
    tmp = data[nb_elem][i][1].split(" ") #donc on split la condition Ex : c = "< 3"
    print(tmp)
    #récupère la valeur quantitative Ex : le 3 ici
    list_valeur_numerique.append(tmp[1])
    list_valeur_egalite.append(tmp[0])
  for i in range(len(data[nb_elem])):
    print("FOR 4")
    Affecter = False
    #print(events[elem].values.tolist()[i])
    #print(data[nb_elem][i][0])
    #print(len(list_valeur_numerique))
    print(list_valeur_egalite)
    if list_valeur_egalite[i] == "=" : #on regarde quel symbol c'est puis selon le symbol en question on va chercher les lignes d'la colonne qui respecte ce symbol (condition)
      print("IF 1")
      for j in range(len(events[elem].values.tolist())): #la boucle pour comparer chaque ligne de la colonne selon le symbol d'égalité et la valeur associé
        print(events[elem].values.tolist()[j])
        print(float(list_valeur_numerique[i]))
        if events[elem].values.tolist()[j] == float(list_valeur_numerique[i]) :
          Affecter = True
          print("IF 1")
          list_concepts.insert(j,(data[nb_elem][i][0]))
    elif list_valeur_egalite[i] == "<=" :
      print("IF 2")
      for j in range(len(events[elem].values.tolist())): #la boucle pour comparer chaque ligne de la colonne selon le symbol d'égalité et la valeur associé
        print(events[elem].values.tolist()[j])
        print(float(list_valeur_numerique[i]))
        if events[elem].values.tolist()[j] <= float(list_valeur_numerique[i]) :
          Affecter = True
          print("IF 2")
          list_concepts.insert(j,(data[nb_elem][i][0]))
    elif list_valeur_egalite[i] == ">=" :
      print("IF 3")
      for j in range(len(events[elem].values.tolist())): #la boucle pour comparer chaque ligne de la colonne selon le symbol d'égalité et la valeur associé
        print(events[elem].values.tolist()[j])
        print(float(list_valeur_numerique[i]))
        if events[elem].values.tolist()[j] >= float(list_valeur_numerique[i]) :
          Affecter = True
          print("IF 3")
          list_concepts.insert(j,(data[nb_elem][i][0]))
    elif list_valeur_egalite[i] == "<" :
      print("IF 4")
      for j in range(len(events[elem].values.tolist())): #la boucle pour comparer chaque ligne de la colonne selon le symbol d'égalité et la valeur associé
        print(events[elem].values.tolist()[j])
        print(float(list_valeur_numerique[i]))
        if events[elem].values.tolist()[j] < float(list_valeur_numerique[i]) :
          Affecter = True
          print("IF 4")
          list_concepts.insert(j,(data[nb_elem][i][0]))
    elif list_valeur_egalite[i] == ">" :
      print("IF 5")
      for j in range(len(events[elem].values.tolist())) :#la boucle pour comparer chaque ligne de la colonne selon le symbol d'égalité et la valeur associé
        print(events[elem].values.tolist()[j])
        print(float(list_valeur_numerique[i]))
        if events[elem].values.tolist()[j] > float(list_valeur_numerique[i]) :
          Affecter = True
          list_concepts.insert(j,(data[nb_elem][i][0]))
    if not Affecter :
     list_concepts.insert(i-1,'NaN')
  events_copied[elem] = list_concepts #remplace les éléments numérique en élément qualitative
  print(list_concepts)
  nb_elem += 1
events_copied.head()

#data[0]
data[nb_elem]
